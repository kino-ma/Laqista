# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import mless_pb2 as mless__pb2


class SchedulerStub(object):
    """
    Scheduler services

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Join = channel.unary_unary(
                '/mless.Scheduler/Join',
                request_serializer=mless__pb2.JoinRequest.SerializeToString,
                response_deserializer=mless__pb2.JoinResponse.FromString,
                )
        self.Notify = channel.unary_unary(
                '/mless.Scheduler/Notify',
                request_serializer=mless__pb2.NotifyRequest.SerializeToString,
                response_deserializer=mless__pb2.NotifyResponse.FromString,
                )
        self.Report = channel.unary_unary(
                '/mless.Scheduler/Report',
                request_serializer=mless__pb2.ReportRequest.SerializeToString,
                response_deserializer=mless__pb2.ReportResponse.FromString,
                )
        self.Deploy = channel.unary_unary(
                '/mless.Scheduler/Deploy',
                request_serializer=mless__pb2.DeployRequest.SerializeToString,
                response_deserializer=mless__pb2.DeployResponse.FromString,
                )
        self.Lookup = channel.unary_unary(
                '/mless.Scheduler/Lookup',
                request_serializer=mless__pb2.LookupRequest.SerializeToString,
                response_deserializer=mless__pb2.LookupResponse.FromString,
                )


class SchedulerServicer(object):
    """
    Scheduler services

    """

    def Join(self, request, context):
        """For cluster management.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Notify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Report(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Deploy(self, request, context):
        """For managing and calling applictions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Lookup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SchedulerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Join': grpc.unary_unary_rpc_method_handler(
                    servicer.Join,
                    request_deserializer=mless__pb2.JoinRequest.FromString,
                    response_serializer=mless__pb2.JoinResponse.SerializeToString,
            ),
            'Notify': grpc.unary_unary_rpc_method_handler(
                    servicer.Notify,
                    request_deserializer=mless__pb2.NotifyRequest.FromString,
                    response_serializer=mless__pb2.NotifyResponse.SerializeToString,
            ),
            'Report': grpc.unary_unary_rpc_method_handler(
                    servicer.Report,
                    request_deserializer=mless__pb2.ReportRequest.FromString,
                    response_serializer=mless__pb2.ReportResponse.SerializeToString,
            ),
            'Deploy': grpc.unary_unary_rpc_method_handler(
                    servicer.Deploy,
                    request_deserializer=mless__pb2.DeployRequest.FromString,
                    response_serializer=mless__pb2.DeployResponse.SerializeToString,
            ),
            'Lookup': grpc.unary_unary_rpc_method_handler(
                    servicer.Lookup,
                    request_deserializer=mless__pb2.LookupRequest.FromString,
                    response_serializer=mless__pb2.LookupResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mless.Scheduler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Scheduler(object):
    """
    Scheduler services

    """

    @staticmethod
    def Join(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mless.Scheduler/Join',
            mless__pb2.JoinRequest.SerializeToString,
            mless__pb2.JoinResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Notify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mless.Scheduler/Notify',
            mless__pb2.NotifyRequest.SerializeToString,
            mless__pb2.NotifyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Report(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mless.Scheduler/Report',
            mless__pb2.ReportRequest.SerializeToString,
            mless__pb2.ReportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Deploy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mless.Scheduler/Deploy',
            mless__pb2.DeployRequest.SerializeToString,
            mless__pb2.DeployResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Lookup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mless.Scheduler/Lookup',
            mless__pb2.LookupRequest.SerializeToString,
            mless__pb2.LookupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ServerDaemonStub(object):
    """
    Server Daemon services

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetInfo = channel.unary_unary(
                '/mless.ServerDaemon/GetInfo',
                request_serializer=mless__pb2.GetInfoRequest.SerializeToString,
                response_deserializer=mless__pb2.GetInfoResponse.FromString,
                )
        self.Ping = channel.unary_unary(
                '/mless.ServerDaemon/Ping',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=mless__pb2.PingResponse.FromString,
                )
        self.Monitor = channel.unary_unary(
                '/mless.ServerDaemon/Monitor',
                request_serializer=mless__pb2.MonitorRequest.SerializeToString,
                response_deserializer=mless__pb2.MonitorResponse.FromString,
                )
        self.Spawn = channel.unary_unary(
                '/mless.ServerDaemon/Spawn',
                request_serializer=mless__pb2.SpawnRequest.SerializeToString,
                response_deserializer=mless__pb2.SpawnResponse.FromString,
                )
        self.Destroy = channel.unary_unary(
                '/mless.ServerDaemon/Destroy',
                request_serializer=mless__pb2.DestroyRequest.SerializeToString,
                response_deserializer=mless__pb2.DestroyResponse.FromString,
                )


class ServerDaemonServicer(object):
    """
    Server Daemon services

    """

    def GetInfo(self, request, context):
        """For getting cluster information.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """For monitoring.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Monitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Spawn(self, request, context):
        """App Instance management.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Destroy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerDaemonServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInfo,
                    request_deserializer=mless__pb2.GetInfoRequest.FromString,
                    response_serializer=mless__pb2.GetInfoResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=mless__pb2.PingResponse.SerializeToString,
            ),
            'Monitor': grpc.unary_unary_rpc_method_handler(
                    servicer.Monitor,
                    request_deserializer=mless__pb2.MonitorRequest.FromString,
                    response_serializer=mless__pb2.MonitorResponse.SerializeToString,
            ),
            'Spawn': grpc.unary_unary_rpc_method_handler(
                    servicer.Spawn,
                    request_deserializer=mless__pb2.SpawnRequest.FromString,
                    response_serializer=mless__pb2.SpawnResponse.SerializeToString,
            ),
            'Destroy': grpc.unary_unary_rpc_method_handler(
                    servicer.Destroy,
                    request_deserializer=mless__pb2.DestroyRequest.FromString,
                    response_serializer=mless__pb2.DestroyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mless.ServerDaemon', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServerDaemon(object):
    """
    Server Daemon services

    """

    @staticmethod
    def GetInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mless.ServerDaemon/GetInfo',
            mless__pb2.GetInfoRequest.SerializeToString,
            mless__pb2.GetInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mless.ServerDaemon/Ping',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            mless__pb2.PingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Monitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mless.ServerDaemon/Monitor',
            mless__pb2.MonitorRequest.SerializeToString,
            mless__pb2.MonitorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Spawn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mless.ServerDaemon/Spawn',
            mless__pb2.SpawnRequest.SerializeToString,
            mless__pb2.SpawnResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Destroy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mless.ServerDaemon/Destroy',
            mless__pb2.DestroyRequest.SerializeToString,
            mless__pb2.DestroyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
